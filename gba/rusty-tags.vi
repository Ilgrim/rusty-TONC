!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLACK	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const BLACK:  Color = Color(0x0000);$/;"	c
BLUE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const BLUE:   Color = Color(0x7C00);$/;"	c
CYAN	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const CYAN:   Color = Color(0x7FE0);$/;"	c
Color	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^impl Color {$/;"	i
Color	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^pub struct Color (pub u16);$/;"	s
DCNT_BG0	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_BG0:  u32 = 0x0100;	\/\/\/< Enable bg 0$/;"	c
DCNT_BG1	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_BG1:  u32 = 0x0200;	\/\/\/< Enable bg 1$/;"	c
DCNT_BG2	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_BG2:  u32 = 0x0400;	\/\/\/< Enable bg 2$/;"	c
DCNT_BG3	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_BG3:  u32 = 0x0800;	\/\/\/< Enable bg 3$/;"	c
DCNT_BLANK	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_BLANK:  u32 = 0x0080;	\/\/\/< Force screen blank$/;"	c
DCNT_BUILD	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub fn DCNT_BUILD(mode: u32, layer: u32, win: u32, obj1d: u32, objhbl: u32) -> u32 {$/;"	f
DCNT_GB	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_GB:  u32 = 0x0008;	\/\/\/< (R) GBC indicator$/;"	c
DCNT_LAYER	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub fn DCNT_LAYER(n : u32) -> u32 {$/;"	f
DCNT_LAYER_MASK	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_LAYER_MASK:  u32 = 0x1F00;$/;"	c
DCNT_LAYER_SHIFT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_LAYER_SHIFT:  u32 = 8;$/;"	c
DCNT_MODE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub fn DCNT_MODE(n : u32) -> u32 {$/;"	f
DCNT_MODE0	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_MODE0:  u32 = 0;	\/\/\/< Mode 0; bg 0-4: reg$/;"	c
DCNT_MODE1	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_MODE1:  u32 = 0x0001;	\/\/\/< Mode 1; bg 0-1: reg; bg 2: affine$/;"	c
DCNT_MODE2	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_MODE2:  u32 = 0x0002;	\/\/\/< Mode 2; bg 2-2: affine$/;"	c
DCNT_MODE3	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_MODE3:  u32 = 0x0003;	\/\/\/< Mode 3; bg2: 240x160\\@16 bitmap$/;"	c
DCNT_MODE4	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_MODE4:  u32 = 0x0004;	\/\/\/< Mode 4; bg2: 240x160\\@8 bitmap$/;"	c
DCNT_MODE5	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_MODE5:  u32 = 0x0005;	\/\/\/< Mode 5; bg2: 160x128\\@16 bitmap$/;"	c
DCNT_MODE_MASK	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_MODE_MASK:  u32 = 0x0007;$/;"	c
DCNT_MODE_SHIFT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_MODE_SHIFT:  u32 = 0;$/;"	c
DCNT_OAM_HBL	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_OAM_HBL:  u32 = 0x0020;	\/\/\/< Allow OAM updates in HBlank$/;"	c
DCNT_OBJ	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_OBJ:  u32 = 0x1000;	\/\/\/< Enable objects$/;"	c
DCNT_OBJ_1D	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_OBJ_1D:  u32 = 0x0040;	\/\/\/< OBJ-VRAM as array$/;"	c
DCNT_OBJ_2D	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_OBJ_2D:  u32 = 0;	\/\/\/< OBJ-VRAM as matrix$/;"	c
DCNT_PAGE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_PAGE:  u32 = 0x0010;	\/\/\/< Page indicator$/;"	c
DCNT_WIN	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub fn DCNT_WIN(n: u32) -> u32 {$/;"	f
DCNT_WIN0	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_WIN0:  u32 = 0x2000;	\/\/\/< Enable window 0$/;"	c
DCNT_WIN1	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_WIN1:  u32 = 0x4000;	\/\/\/< Enable window 1$/;"	c
DCNT_WINOBJ	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_WINOBJ:  u32 = 0x8000;	\/\/\/< Enable object window$/;"	c
DCNT_WIN_MASK	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_WIN_MASK:  u32 = 0xE000;$/;"	c
DCNT_WIN_SHIFT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const DCNT_WIN_SHIFT:  u32 = 13;$/;"	c
Input	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^impl Input {$/;"	i
Input	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^pub struct Input {$/;"	s
KEY_A	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_A:  u32 = 0x0001;	\/\/\/< Button A$/;"	c
KEY_ACCEPT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_ACCEPT:  u32 = 0x0009;	\/\/\/< A or start$/;"	c
KEY_ANY	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_ANY:  u32 = 0x03FF;	\/\/\/< any key$/;"	c
KEY_B	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_B:  u32 = 0x0002;	\/\/\/< Button B$/;"	c
KEY_CANCEL	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_CANCEL:  u32 = 0x0002;	\/\/\/< B (well, it usually is)$/;"	c
KEY_DIR	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_DIR:  u32 = 0x00F0;	\/\/\/< any-dpad$/;"	c
KEY_DOWN	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_DOWN:  u32 = 0x0080;	\/\/\/< Down D-pad$/;"	c
KEY_L	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_L:  u32 = 0x0200;	\/\/\/< Shoulder L$/;"	c
KEY_LEFT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_LEFT:  u32 = 0x0020;	\/\/\/< Left D-pad$/;"	c
KEY_MASK	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_MASK:  u32 = 0x03FF;$/;"	c
KEY_R	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_R:  u32 = 0x0100;	\/\/\/< Shoulder R$/;"	c
KEY_RESET	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_RESET:  u32 = 0x000F;	\/\/\/< St+Se+A+B$/;"	c
KEY_RIGHT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_RIGHT:  u32 = 0x0010;	\/\/\/< Right D-pad$/;"	c
KEY_SELECT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_SELECT:  u32 = 0x0004;	\/\/\/< Select button$/;"	c
KEY_SHOULDER	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_SHOULDER:  u32 = 0x0300;	\/\/\/< L or R$/;"	c
KEY_START	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_START:  u32 = 0x0008;	\/\/\/< Start button$/;"	c
KEY_UP	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memdef.rs	/^pub const KEY_UP:  u32 = 0x0040;	\/\/\/< Up D-pad$/;"	c
KeyIndex	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^pub enum KeyIndex {$/;"	g
Keys	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^pub enum Keys {$/;"	g
LIME	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const LIME:   Color = Color(0x03E0);$/;"	c
M3_HEIGHT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^const M3_HEIGHT: u32 = SCREEN_HEIGHT;$/;"	c
M3_SIZE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const M3_SIZE : u32 = 0x12C00;$/;"	c
M3_WIDTH	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^const M3_WIDTH: u32 = SCREEN_WIDTH;$/;"	c
M4_HEIGHT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^const M4_HEIGHT: u32 = SCREEN_HEIGHT;$/;"	c
M4_SIZE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const M4_SIZE : u32 = 0x09600;$/;"	c
M4_WIDTH	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^const M4_WIDTH: u32 = SCREEN_WIDTH;$/;"	c
M5_HEIGHT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^const M5_HEIGHT: u32 = 128;$/;"	c
M5_SIZE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const M5_SIZE : u32 = 0x0A000;$/;"	c
M5_WIDTH	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^const M5_WIDTH: u32 = 160;$/;"	c
MAG	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const MAG:    Color = Color(0x7C1F);$/;"	c
MEM_IO	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const MEM_IO : u32 = 0x04000000;$/;"	c
MEM_PAL	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const MEM_PAL : u32 = 0x05000000;		\/\/ no 8bit write !!$/;"	c
MEM_VRAM	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const MEM_VRAM : u32 = 0x06000000;		\/\/ no 8bit write !!$/;"	c
MEM_VRAM_BACK	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const MEM_VRAM_BACK : u32 = (MEM_VRAM + VRAM_PAGE_SIZE);$/;"	c
Mode3	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^impl Mode3 {$/;"	i
Mode3	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^pub struct Mode3;$/;"	s
Mode4	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^impl Mode4 {$/;"	i
Mode4	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^pub struct Mode4;$/;"	s
Mode5	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^impl Mode5 {$/;"	i
Mode5	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^pub struct Mode5;$/;"	s
PAL_SIZE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const PAL_SIZE : u32 = 0x00400;$/;"	c
PaletteIx	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^pub struct PaletteIx (pub u8);$/;"	s
RED	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const RED:    Color = Color(0x001F);$/;"	c
REG_BASE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const REG_BASE: u32 = MEM_IO;$/;"	c
REG_DISPCNT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const REG_DISPCNT: *mut u32 = (REG_BASE + 0x0000) as *mut u32;	\/\/ display control$/;"	c
REG_DISPSTAT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const REG_DISPSTAT: *mut u16 = (REG_BASE + 0x0004) as *mut u16;	\/\/ display interupt status$/;"	c
REG_KEYINPUT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const REG_KEYINPUT: *mut u16 = (REG_BASE + 0x0130) as *mut u16;	\/\/ Key status$/;"	c
REG_VCOUNT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const REG_VCOUNT: *mut u16 = (REG_BASE + 0x0006) as *mut u16;	\/\/ vertical count$/;"	c
SCREEN_HEIGHT	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^const SCREEN_HEIGHT: u32 = 160;$/;"	c
SCREEN_WIDTH	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^const SCREEN_WIDTH: u32 = 240;$/;"	c
VRAM_PAGE_SIZE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const VRAM_PAGE_SIZE : u32 = 0x0A000;$/;"	c
VRAM_SIZE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const VRAM_SIZE : u32 = 0x18000;$/;"	c
WHITE	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const WHITE:  Color = Color(0x7FFF);$/;"	c
YELLOW	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const YELLOW: Color = Color(0x03FF);$/;"	c
bit_tribool	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    fn bit_tribool(&mut self, negative : KeyIndex, positive : KeyIndex) -> i32{$/;"	f
dot	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub fn dot(&mut self, x: u32, y: u32, color: Color) {$/;"	f
dot	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub fn dot(&mut self, x: u32, y: u32, color: PaletteIx) {$/;"	f
fn	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub const fn rgb15(red: u32, green: u32, blue: u32) -> Color {$/;"	c
gfx	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/lib.rs	/^pub mod gfx;$/;"	m
held	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn held(&mut self, k: Keys) -> bool {$/;"	f
hit	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn hit(&mut self, k: Keys) -> bool {$/;"	f
horz_line	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub fn horz_line(&mut self, l: u32, r: u32, y: u32, color: PaletteIx) {$/;"	f
input	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/lib.rs	/^pub mod input;$/;"	m
is_down	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn is_down(&mut self, k : Keys) -> bool {$/;"	f
is_up	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn is_up(&mut self, k : Keys) -> bool {$/;"	f
main	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/build.rs	/^fn main() {$/;"	f
memdef	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/lib.rs	/^pub mod memdef;$/;"	m
memmap	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/lib.rs	/^pub mod memmap;$/;"	m
new	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub fn new () -> Mode3 {$/;"	f
new	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub fn new() -> Mode4 {$/;"	f
new	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^    pub fn new() -> Mode5 {$/;"	f
new	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn new() -> Input {$/;"	f
pal_bg_mem	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const pal_bg_mem: *mut Color =  MEM_PAL as *mut Color;$/;"	c
poll	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn poll(&mut self) {$/;"	f
released	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn released(&mut self, k: Keys) -> bool {$/;"	f
tonc_stolen	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/lib.rs	/^pub mod tonc_stolen;$/;"	m
tonccpy	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/tonc_stolen.rs	/^    pub fn tonccpy(dst: *mut u8, src: *const u8, size: usize) -> *mut u8;$/;"	f
tri_fire	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn tri_fire(&mut self) -> i32 {$/;"	f
tri_horz	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn tri_horz(&mut self) -> i32 {$/;"	f
tri_shoulder	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn tri_shoulder(&mut self) -> i32 {$/;"	f
tri_vert	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/input.rs	/^    pub fn tri_vert(&mut self) -> i32 {$/;"	f
vid_mem	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const vid_mem: *mut Color = MEM_VRAM as *mut Color;$/;"	c
vid_mem_back	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const vid_mem_back: *mut Color = MEM_VRAM_BACK as *mut Color;$/;"	c
vid_mem_front	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/memmap.rs	/^pub const vid_mem_front: *mut Color = MEM_VRAM as *mut Color;$/;"	c
vid_vsync	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/gfx.rs	/^pub fn vid_vsync(){$/;"	f
volatile_load	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/lib.rs	/^    pub fn volatile_load<T>(src: *const T) -> T;$/;"	f
volatile_store	/Users/tbelaire/code/Rust/gba/rust/key_demo/../gba/src/lib.rs	/^    pub fn volatile_store<T>(dst: *mut T, val: T);$/;"	f
